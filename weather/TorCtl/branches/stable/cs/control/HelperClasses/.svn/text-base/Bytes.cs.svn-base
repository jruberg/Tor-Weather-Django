/*
 * File Bytes.cs
 * 
 * Copyright (C) 2005 Oliver Rau (olra0001@student-zw.fh-kl.de)
 * 
 * See LICENSE file for copying information 
 * 
 * Created on 08.08.2005 20:37
 * 
 * $Id$
 */

using System;
using System.Collections;
using System.Text;

namespace Tor.Control
{
	/// <summary>
	/// Description of Bytes.
	/// </summary>
	public class Bytes
	{

		private static char[] NYBBLES = {
			'0', '1', '2', '3', '4', '5', '6', '7',
			'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
		};
		
		Bytes() {}
		
		public static void SetU16(byte[] ba, int pos, short s)
		{
			ba[pos]   = (byte)((s >> 8) & 0xff);
			ba[pos+1] = (byte)((s     ) & 0xff);
		}
		
		public static void SetU32(byte[] ba, int pos, int i)
		{
			ba[pos]   = (byte)((i >> 24) & 0xff);
			ba[pos+1] = (byte)((i >> 16) & 0xff);
			ba[pos+2] = (byte)((i >>  8) & 0xff);
			ba[pos+3] = (byte)((i      ) & 0xff);
		}
		
		public static int GetU32(byte[] ba, int pos)
		{
			return
					((ba[pos  ] & 0xff) << 24) |
					((ba[pos+1] & 0xff) << 16) |
					((ba[pos+2] & 0xff) << 8)  |
					((ba[pos+3] & 0xff));
		}
		
		public static string GetU32S(byte[] ba, int pos)
		{
			return (((long)GetU32(ba,pos))&0xffffffffL ).ToString();
		}
		
		public static int GetU16(byte[] ba, int pos)
		{
			return
					((ba[pos  ] & 0xff) << 8) |
					((ba[pos+1] & 0xff));
		}
		
		public static string GetNulTerminatedStr(byte[] ba, int pos)
		{
			int len, maxlen = ba.Length - pos;
			
			for (len=0; len < maxlen; ++len) {
				if (ba[pos+len] == 0)
					break;
			}
			
			return ByteArrayToString(ba, pos, len);
		}

		/**
		 * Read bytes from 'ba' starting at 'pos', dividing them into strings
		 * along the character in 'split' and writing them into 'lst'
		 */
		public static void SplitStr(IList lst, byte[] ba, int pos, byte split)
		{
			while (pos < ba.Length && ba[pos] != 0) {
				int len;
				
				for (len=0; pos+len < ba.Length; ++len) {
					if (ba[pos+len] == 0 || ba[pos+len] == split)
						break;
				}
				
				if (len > 0)
					lst.Add(ByteArrayToString(ba, pos, len));
					pos += len;
					
				if (ba[pos] == split)
					++pos;
			}
		}

		/**
		 * Read bytes from 'ba' starting at 'pos', dividing them into strings
		 * along the character in 'split' and writing them into 'lst'
		 */
		public static IList SplitStr(IList lst, string str)
		{
			if (lst == null)
				lst = new ArrayList();
			
			foreach (string s in str.Split(' ')) {
				lst.Add(s);
			}
			
			return lst;
		}
		
		public static string Hex(byte[] ba)
		{
			StringBuilder sb = new StringBuilder();
			
			for (int i = 0; i < ba.Length; ++i) {
				int b = ((int)ba[i]) & 0xff;
				
				sb.Append(NYBBLES[b >> 4]);
				sb.Append(NYBBLES[b & 0x0f]);
			}
			
			return sb.ToString();
		}
		
		public static string ByteArrayToString(byte[] ba, int offset, int len)
		{
			char[] chars = new char[len];
			for (int i = 0; i < len; ++i) {
				chars[i] = Convert.ToChar(ba[offset+i]);
			}
			
			return new string(chars);
		}
	}
}
